public void testType(int x, int y){
    int kooridinatX = x;
    int kooridinatY = y;

    System.out.println("\nTest av type");

    System.out.println("Ruta pÃ¥ rad/kolonne: " + x + "/" + y + " : " + labyrint[x][y].testType());
}

public void testNabo(int x, int y){
    int kooridinatX = x;
    int kooridinatY = y;
    System.out.println("\n\nTest av naboer:");

    System.out.println("Denne er: " +  labyrint[x][y] + " rad: " + kooridinatX + " kolonne: " + kooridinatY);

    System.out.println("Nord: " + labyrint[x][y].hentNaboNord());
    System.out.println("Vest: " + labyrint[x][y].hentNaboVest());
    System.out.println("Syd: " + labyrint[x][y].hentNaboSyd());
    System.out.println("Ost: " + labyrint[x][y].hentNaboOst());
}

public Rute erMulig(){
    for (Rute nabo : naboer){
        if (nabo.tilTegn() == '.' && nabo.ubrukt()){
            return true;
        }
    }
}


nord != null &&
syd != null &&
ost != null &&
vest != null &&


public void gaa(int x, int y){
    start = lab.hentRute(x,y);

    if (start.nord.tilTegn() == '.' && start.nord.ubrukt()){
        ubrukt = false;
        start = start.nord;
        gaa(start.nord.hentRad(), start.nord.hentKolonne());
    }
    if (start.syd.tilTegn() == '.' && start.syd.ubrukt()){
        ubrukt = false;
        gaa(start.syd.hentRad(), start.syd.hentKolonne());
    }
    if (start.ost.tilTegn() == '.' && start.ost.ubrukt()){
        ubrukt = false;
        gaa(start.ost.hentRad(), start.ost.hentKolonne());
    }
    if (start.vest.tilTegn() == '.' && start.vest.ubrukt()){
        ubrukt = false;
        gaa(start.vest.hentRad(), start.vest.hentKolonne());
    }
}


public void gaa(int x, int y){
    start = lab.hentRute(x,y);

    if (start.nord.tilTegn() == '.' || (!(brukteruter.contains(start.nord)))){
        brukteruter.add(start);
        start = start.nord;
    }
    if (start.syd.tilTegn() == '.' || (!(brukteruter.contains(start.syd)))){
        brukteruter.add(start);
        start = start.syd;
    }
    if (start.ost.tilTegn() == '.' || (!(brukteruter.contains(start.ost)))){
        brukteruter.add(start);
        start = start.ost;
    }
    if (start.vest.tilTegn() == '.' || (!(brukteruter.contains(start.vest)))){
        brukteruter.add(start);
        start = start.vest;
    }
}

public void fraaSyd(Rute rute){
    if (start.nord.tilTegn() == '.' || (!(brukteruter.contains(start.nord)))){
        brukteruter.add(start);
        start = start.nord;
    }

    if (start.ost.tilTegn() == '.' || (!(brukteruter.contains(start.ost)))){
        brukteruter.add(start);
        start = start.ost;
    }

    if (start.vest.tilTegn() == '.' || (!(brukteruter.contains(start.vest)))){
        brukteruter.add(start);
        start = start.vest;
    }
}

public void fraaNord(Rute rute){
    if (start.syd.tilTegn() == '.' || (!(brukteruter.contains(start.syd)))){
        brukteruter.add(start);
        start = start.syd;
    }
    if (start.ost.tilTegn() == '.' || (!(brukteruter.contains(start.ost)))){
        brukteruter.add(start);
        start = start.ost;
    }
    if (start.vest.tilTegn() == '.' || (!(brukteruter.contains(start.vest)))){
        brukteruter.add(start);
        start = start.vest;
    }
}

public void fraaVest(Rute rute){
    if (start.nord.tilTegn() == '.' || (!(brukteruter.contains(start.nord)))){
        brukteruter.add(start);
        start = start.nord;
    }
    if (start.syd.tilTegn() == '.' || (!(brukteruter.contains(start.syd)))){
        brukteruter.add(start);
        start = start.syd;
    }
    if (start.ost.tilTegn() == '.' || (!(brukteruter.contains(start.ost)))){
        brukteruter.add(start);
        start = start.ost;
}

public void fraaOst(Rute rute){
    if (start.nord.tilTegn() == '.' || (!(brukteruter.contains(start.nord)))){
        brukteruter.add(start);
        start = start.nord;
    }

    if (start.nord.tilTegn() == '.' || (!(brukteruter.contains(start.nord)))){
        brukteruter.add(start);
        start = start.nord;
    }
    if (start.syd.tilTegn() == '.' || (!(brukteruter.contains(start.syd)))){
        brukteruter.add(start);
        start = start.syd;
    }
}




for (int i ; i < rader ; i++){
    Lenkeliste ny = null;
    rutenett.leggTil(ny);
    for (int e; i < kolonner){
        char type = inndata.nextChar();

        if (type.equals("#")){
            SortRute ny = new SortRute(i,e);
            rutenett.hent(i) = ny;
        }
        else if (type.equals(".")){
            HvitRute ny = new HvitRute(i,e);
        }
    }
}

boolean nord = labyrint[i-1][j];
boolean vest = labyrint[i][j-1];
boolean ost = labyrint[i][j+1];
boolean syd = labyrint[i+1][j];


public boolean sjekkOmNordTom(){
    for(int i=0; i < labyrint.length; i++) {
        for(int j=0; j < labyrint[i].length; j++){
            if (labyrint[i-1][j] != null){
                return true;
            }
        }
    }
    return false;
}

public boolean sjekkOmVestTom(){
    for(int i=0; i < labyrint.length; i++) {
        for(int j=0; j < labyrint[i].length; j++){
            if (labyrint[i][j-1] != null){
                return true;
            }
        }
    }
    return false;
}
public boolean sjekkOmOstTom(){
    for(int i=0; i < labyrint.length; i++) {
        for(int j=0; j < labyrint[i].length; j++){
            if (labyrint[i][j+1] != null){
                return true;
            }
        }
    }
    return false;
}
public boolean sjekkOmSydTom(){
    for(int i=0; i < labyrint.length; i++) {
        for(int j=0; j < labyrint[i].length; j++){
            if (labyrint[i+1][j] != null){
                return true;
            }
        }
    }
    return false;
}
